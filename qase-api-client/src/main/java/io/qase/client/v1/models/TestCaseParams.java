/*
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.qase.client.v1.models;

import java.util.Objects;
import java.util.List;
import java.util.Map;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import io.qase.client.v1.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class TestCaseParams extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TestCaseParams.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TestCaseParams.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TestCaseParams' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);

            final Type typeInstanceListObject = new TypeToken<List<Object>>(){}.getType();
            final TypeAdapter<List<Object>> adapterListObject = (TypeAdapter<List<Object>>) gson.getDelegateAdapter(this, TypeToken.get(typeInstanceListObject));
            final Type typeInstanceMapStringListString = new TypeToken<Map<String, List<String>>>(){}.getType();
            final TypeAdapter<Map<String, List<String>>> adapterMap = (TypeAdapter<Map<String, List<String>>>) gson.getDelegateAdapter(this, TypeToken.get(typeInstanceMapStringListString));

            return (TypeAdapter<T>) new TypeAdapter<TestCaseParams>() {
                @Override
                public void write(JsonWriter out, TestCaseParams value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `List<Object>`
                    if (value.getActualInstance() instanceof List<?>) {
                        JsonPrimitive primitive = adapterListObject.toJsonTree((List<Object>)value.getActualInstance()).getAsJsonPrimitive();
                        elementAdapter.write(out, primitive);
                        return;
                    }
                    // check if the actual instance is of the type `Map<String, List<String>>`
                    if (value.getActualInstance() instanceof Map) {
                        JsonElement element = adapterMap.toJsonTree((Map<String, List<String>>)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: List<Object>, Map<String, List<String>>");
                }

                @Override
                public TestCaseParams read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize List<Object>
                    try {
                        // validate the JSON object to see if any exception is thrown
                        if (!jsonElement.isJsonArray()) {
                            throw new IllegalArgumentException(String.format("Expected json element to be a array type in the JSON string but got `%s`", jsonElement.toString()));
                        }

                        JsonArray array = jsonElement.getAsJsonArray();
                        // validate array items
                        for(JsonElement element : array) {
                            if (!element.getAsJsonPrimitive().isNumber()) {
                                throw new IllegalArgumentException(String.format("Expected array items to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
                            }
                        }
                        actualAdapter = adapterListObject;
                        TestCaseParams ret = new TestCaseParams();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for List<Object> failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'List<Object>'", e);
                    }
                    // deserialize Map<String, List<String>>
                    try {
                        // validate the JSON object to see if any exception is thrown
                        validateJsonElement(jsonElement);
                        actualAdapter = adapterMap;
                        TestCaseParams ret = new TestCaseParams();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Map<String, List<String>> failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Map<String, List<String>>'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for TestCaseParams: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public TestCaseParams() {
        super("anyOf", Boolean.FALSE);
    }

    public TestCaseParams(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("List<Object>", List.class);
        schemas.put("Map<String, List<String>>", Map.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return TestCaseParams.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * List<Object>, Map<String, List<String>>
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof List<?>) {
            List<?> list = (List<?>) instance;
            if (list.get(0) instanceof Object) {
                super.setActualInstance(instance);
                return;
            }
        }

        if (instance instanceof Map) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be List<Object>, Map<String, List<String>>");
    }

    /**
     * Get the actual instance, which can be the following:
     * List<Object>, Map<String, List<String>>
     *
     * @return The actual instance (List<Object>, Map<String, List<String>>)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Map<String, List<String>>`. If the actual instance is not `Map<String, List<String>>`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Map<String, List<String>>`
     * @throws ClassCastException if the instance is not `Map<String, List<String>>`
     */
    public Map<String, List<String>> getMapStringListString() throws ClassCastException {
        return (Map<String, List<String>>)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to TestCaseParams
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with List<Object>
        try {
            if (!jsonElement.isJsonArray()) {
                throw new IllegalArgumentException(String.format("Expected json element to be a array type in the JSON string but got `%s`", jsonElement.toString()));
            }
            JsonArray array = jsonElement.getAsJsonArray();
            // validate array items
            for(JsonElement element : array) {
                if (!element.getAsJsonPrimitive().isNumber()) {
                    throw new IllegalArgumentException(String.format("Expected array items to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
                }
            }
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for List<Object> failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Map<String, List<String>>
        try {
            if (!jsonElement.isJsonObject()) {
                throw new IllegalArgumentException(String.format("Expected json element to be an object type in the JSON string but got `%s`", jsonElement.toString()));
            }

            JsonObject jsonObject = jsonElement.getAsJsonObject();
            for (Map.Entry<String, JsonElement> entry : jsonObject.entrySet()) {
                JsonElement value = entry.getValue();
                if (!value.isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected object values to be arrays in the JSON string but got `%s` for key `%s`", value.toString(), entry.getKey()));
                }

                JsonArray array = value.getAsJsonArray();
                for (JsonElement element : array) {
                    if (!element.isJsonPrimitive() || !element.getAsJsonPrimitive().isString()) {
                        throw new IllegalArgumentException(String.format("Expected array items to be of type String in the JSON string but got `%s`", element.toString()));
                    }
                }
            }
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Map<String, List<String>> failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for TestCaseParams with anyOf schemas: List<Object>, Map<String, List<String>>. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of TestCaseParams given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TestCaseParams
     * @throws IOException if the JSON string is invalid with respect to TestCaseParams
     */
    public static TestCaseParams fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TestCaseParams.class);
    }

    /**
     * Convert an instance of TestCaseParams to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

