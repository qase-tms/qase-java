/*
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.qase.client.v1.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.qase.client.v1.JSON;

/**
 * RunStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class RunStats {
  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private Map<String, Integer> statuses = new HashMap<>();

  public static final String SERIALIZED_NAME_UNTESTED = "untested";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_UNTESTED)
  private Integer untested;

  public static final String SERIALIZED_NAME_PASSED = "passed";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PASSED)
  private Integer passed;

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FAILED)
  private Integer failed;

  public static final String SERIALIZED_NAME_BLOCKED = "blocked";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_BLOCKED)
  private Integer blocked;

  public static final String SERIALIZED_NAME_SKIPPED = "skipped";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SKIPPED)
  private Integer skipped;

  public static final String SERIALIZED_NAME_RETEST = "retest";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RETEST)
  private Integer retest;

  public static final String SERIALIZED_NAME_IN_PROGRESS = "in_progress";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS)
  private Integer inProgress;

  public static final String SERIALIZED_NAME_INVALID = "invalid";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_INVALID)
  private Integer invalid;

  public RunStats() {
  }

  public RunStats total(Integer total) {
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }


  public RunStats statuses(Map<String, Integer> statuses) {
    this.statuses = statuses;
    return this;
  }

  public RunStats putStatusesItem(String key, Integer statusesItem) {
    if (this.statuses == null) {
      this.statuses = new HashMap<>();
    }
    this.statuses.put(key, statusesItem);
    return this;
  }

   /**
   * Get statuses
   * @return statuses
  **/
  @javax.annotation.Nullable
  public Map<String, Integer> getStatuses() {
    return statuses;
  }

  public void setStatuses(Map<String, Integer> statuses) {
    this.statuses = statuses;
  }


  @Deprecated
  public RunStats untested(Integer untested) {
    this.untested = untested;
    return this;
  }

   /**
   * Get untested
   * @return untested
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public Integer getUntested() {
    return untested;
  }

  @Deprecated
  public void setUntested(Integer untested) {
    this.untested = untested;
  }


  @Deprecated
  public RunStats passed(Integer passed) {
    this.passed = passed;
    return this;
  }

   /**
   * Get passed
   * @return passed
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public Integer getPassed() {
    return passed;
  }

  @Deprecated
  public void setPassed(Integer passed) {
    this.passed = passed;
  }


  @Deprecated
  public RunStats failed(Integer failed) {
    this.failed = failed;
    return this;
  }

   /**
   * Get failed
   * @return failed
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public Integer getFailed() {
    return failed;
  }

  @Deprecated
  public void setFailed(Integer failed) {
    this.failed = failed;
  }


  @Deprecated
  public RunStats blocked(Integer blocked) {
    this.blocked = blocked;
    return this;
  }

   /**
   * Get blocked
   * @return blocked
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public Integer getBlocked() {
    return blocked;
  }

  @Deprecated
  public void setBlocked(Integer blocked) {
    this.blocked = blocked;
  }


  @Deprecated
  public RunStats skipped(Integer skipped) {
    this.skipped = skipped;
    return this;
  }

   /**
   * Get skipped
   * @return skipped
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public Integer getSkipped() {
    return skipped;
  }

  @Deprecated
  public void setSkipped(Integer skipped) {
    this.skipped = skipped;
  }


  @Deprecated
  public RunStats retest(Integer retest) {
    this.retest = retest;
    return this;
  }

   /**
   * Get retest
   * @return retest
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public Integer getRetest() {
    return retest;
  }

  @Deprecated
  public void setRetest(Integer retest) {
    this.retest = retest;
  }


  @Deprecated
  public RunStats inProgress(Integer inProgress) {
    this.inProgress = inProgress;
    return this;
  }

   /**
   * Get inProgress
   * @return inProgress
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public Integer getInProgress() {
    return inProgress;
  }

  @Deprecated
  public void setInProgress(Integer inProgress) {
    this.inProgress = inProgress;
  }


  @Deprecated
  public RunStats invalid(Integer invalid) {
    this.invalid = invalid;
    return this;
  }

   /**
   * Get invalid
   * @return invalid
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public Integer getInvalid() {
    return invalid;
  }

  @Deprecated
  public void setInvalid(Integer invalid) {
    this.invalid = invalid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunStats runStats = (RunStats) o;
    return Objects.equals(this.total, runStats.total) &&
        Objects.equals(this.statuses, runStats.statuses) &&
        Objects.equals(this.untested, runStats.untested) &&
        Objects.equals(this.passed, runStats.passed) &&
        Objects.equals(this.failed, runStats.failed) &&
        Objects.equals(this.blocked, runStats.blocked) &&
        Objects.equals(this.skipped, runStats.skipped) &&
        Objects.equals(this.retest, runStats.retest) &&
        Objects.equals(this.inProgress, runStats.inProgress) &&
        Objects.equals(this.invalid, runStats.invalid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, statuses, untested, passed, failed, blocked, skipped, retest, inProgress, invalid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunStats {\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    untested: ").append(toIndentedString(untested)).append("\n");
    sb.append("    passed: ").append(toIndentedString(passed)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    blocked: ").append(toIndentedString(blocked)).append("\n");
    sb.append("    skipped: ").append(toIndentedString(skipped)).append("\n");
    sb.append("    retest: ").append(toIndentedString(retest)).append("\n");
    sb.append("    inProgress: ").append(toIndentedString(inProgress)).append("\n");
    sb.append("    invalid: ").append(toIndentedString(invalid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("total");
    openapiFields.add("statuses");
    openapiFields.add("untested");
    openapiFields.add("passed");
    openapiFields.add("failed");
    openapiFields.add("blocked");
    openapiFields.add("skipped");
    openapiFields.add("retest");
    openapiFields.add("in_progress");
    openapiFields.add("invalid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RunStats
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunStats is not found in the empty JSON string", RunStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunStats.class));

       return (TypeAdapter<T>) new TypeAdapter<RunStats>() {
           @Override
           public void write(JsonWriter out, RunStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RunStats given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RunStats
  * @throws IOException if the JSON string is invalid with respect to RunStats
  */
  public static RunStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunStats.class);
  }

 /**
  * Convert an instance of RunStats to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

