/*
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.qase.client.v1.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.qase.client.v1.JSON;

/**
 * RunStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.15.0")
public class RunStats {
  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  @javax.annotation.Nullable
  private Integer total;

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  @javax.annotation.Nullable
  private Map<String, Integer> statuses = new HashMap<>();

  public static final String SERIALIZED_NAME_UNTESTED = "untested";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_UNTESTED)
  @javax.annotation.Nullable
  private Integer untested;

  public static final String SERIALIZED_NAME_PASSED = "passed";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PASSED)
  @javax.annotation.Nullable
  private Integer passed;

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FAILED)
  @javax.annotation.Nullable
  private Integer failed;

  public static final String SERIALIZED_NAME_BLOCKED = "blocked";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_BLOCKED)
  @javax.annotation.Nullable
  private Integer blocked;

  public static final String SERIALIZED_NAME_SKIPPED = "skipped";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SKIPPED)
  @javax.annotation.Nullable
  private Integer skipped;

  public static final String SERIALIZED_NAME_RETEST = "retest";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RETEST)
  @javax.annotation.Nullable
  private Integer retest;

  public static final String SERIALIZED_NAME_IN_PROGRESS = "in_progress";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS)
  @javax.annotation.Nullable
  private Integer inProgress;

  public static final String SERIALIZED_NAME_INVALID = "invalid";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_INVALID)
  @javax.annotation.Nullable
  private Integer invalid;

  public RunStats() {
  }

  public RunStats total(@javax.annotation.Nullable Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(@javax.annotation.Nullable Integer total) {
    this.total = total;
  }


  public RunStats statuses(@javax.annotation.Nullable Map<String, Integer> statuses) {
    this.statuses = statuses;
    return this;
  }

  public RunStats putStatusesItem(String key, Integer statusesItem) {
    if (this.statuses == null) {
      this.statuses = new HashMap<>();
    }
    this.statuses.put(key, statusesItem);
    return this;
  }

  /**
   * Get statuses
   * @return statuses
   */
  @javax.annotation.Nullable
  public Map<String, Integer> getStatuses() {
    return statuses;
  }

  public void setStatuses(@javax.annotation.Nullable Map<String, Integer> statuses) {
    this.statuses = statuses;
  }


  @Deprecated
  public RunStats untested(@javax.annotation.Nullable Integer untested) {
    this.untested = untested;
    return this;
  }

  /**
   * Get untested
   * @return untested
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getUntested() {
    return untested;
  }

  @Deprecated
  public void setUntested(@javax.annotation.Nullable Integer untested) {
    this.untested = untested;
  }


  @Deprecated
  public RunStats passed(@javax.annotation.Nullable Integer passed) {
    this.passed = passed;
    return this;
  }

  /**
   * Get passed
   * @return passed
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getPassed() {
    return passed;
  }

  @Deprecated
  public void setPassed(@javax.annotation.Nullable Integer passed) {
    this.passed = passed;
  }


  @Deprecated
  public RunStats failed(@javax.annotation.Nullable Integer failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Get failed
   * @return failed
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getFailed() {
    return failed;
  }

  @Deprecated
  public void setFailed(@javax.annotation.Nullable Integer failed) {
    this.failed = failed;
  }


  @Deprecated
  public RunStats blocked(@javax.annotation.Nullable Integer blocked) {
    this.blocked = blocked;
    return this;
  }

  /**
   * Get blocked
   * @return blocked
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getBlocked() {
    return blocked;
  }

  @Deprecated
  public void setBlocked(@javax.annotation.Nullable Integer blocked) {
    this.blocked = blocked;
  }


  @Deprecated
  public RunStats skipped(@javax.annotation.Nullable Integer skipped) {
    this.skipped = skipped;
    return this;
  }

  /**
   * Get skipped
   * @return skipped
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getSkipped() {
    return skipped;
  }

  @Deprecated
  public void setSkipped(@javax.annotation.Nullable Integer skipped) {
    this.skipped = skipped;
  }


  @Deprecated
  public RunStats retest(@javax.annotation.Nullable Integer retest) {
    this.retest = retest;
    return this;
  }

  /**
   * Get retest
   * @return retest
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getRetest() {
    return retest;
  }

  @Deprecated
  public void setRetest(@javax.annotation.Nullable Integer retest) {
    this.retest = retest;
  }


  @Deprecated
  public RunStats inProgress(@javax.annotation.Nullable Integer inProgress) {
    this.inProgress = inProgress;
    return this;
  }

  /**
   * Get inProgress
   * @return inProgress
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getInProgress() {
    return inProgress;
  }

  @Deprecated
  public void setInProgress(@javax.annotation.Nullable Integer inProgress) {
    this.inProgress = inProgress;
  }


  @Deprecated
  public RunStats invalid(@javax.annotation.Nullable Integer invalid) {
    this.invalid = invalid;
    return this;
  }

  /**
   * Get invalid
   * @return invalid
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getInvalid() {
    return invalid;
  }

  @Deprecated
  public void setInvalid(@javax.annotation.Nullable Integer invalid) {
    this.invalid = invalid;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RunStats instance itself
   */
  public RunStats putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunStats runStats = (RunStats) o;
    return Objects.equals(this.total, runStats.total) &&
        Objects.equals(this.statuses, runStats.statuses) &&
        Objects.equals(this.untested, runStats.untested) &&
        Objects.equals(this.passed, runStats.passed) &&
        Objects.equals(this.failed, runStats.failed) &&
        Objects.equals(this.blocked, runStats.blocked) &&
        Objects.equals(this.skipped, runStats.skipped) &&
        Objects.equals(this.retest, runStats.retest) &&
        Objects.equals(this.inProgress, runStats.inProgress) &&
        Objects.equals(this.invalid, runStats.invalid)&&
        Objects.equals(this.additionalProperties, runStats.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, statuses, untested, passed, failed, blocked, skipped, retest, inProgress, invalid, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunStats {\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    untested: ").append(toIndentedString(untested)).append("\n");
    sb.append("    passed: ").append(toIndentedString(passed)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    blocked: ").append(toIndentedString(blocked)).append("\n");
    sb.append("    skipped: ").append(toIndentedString(skipped)).append("\n");
    sb.append("    retest: ").append(toIndentedString(retest)).append("\n");
    sb.append("    inProgress: ").append(toIndentedString(inProgress)).append("\n");
    sb.append("    invalid: ").append(toIndentedString(invalid)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("total", "statuses", "untested", "passed", "failed", "blocked", "skipped", "retest", "in_progress", "invalid"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunStats is not found in the empty JSON string", RunStats.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunStats.class));

       return (TypeAdapter<T>) new TypeAdapter<RunStats>() {
           @Override
           public void write(JsonWriter out, RunStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RunStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             RunStats instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunStats
   * @throws IOException if the JSON string is invalid with respect to RunStats
   */
  public static RunStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunStats.class);
  }

  /**
   * Convert an instance of RunStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

