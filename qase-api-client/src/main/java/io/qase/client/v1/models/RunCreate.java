/*
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.qase.client.v1.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.qase.client.v1.models.RunCreateCloudRunConfig;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.qase.client.v1.JSON;

/**
 * RunCreate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.15.0")
public class RunCreate {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  @javax.annotation.Nonnull
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_INCLUDE_ALL_CASES = "include_all_cases";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ALL_CASES)
  @javax.annotation.Nullable
  private Boolean includeAllCases;

  public static final String SERIALIZED_NAME_CASES = "cases";
  @SerializedName(SERIALIZED_NAME_CASES)
  @javax.annotation.Nullable
  private List<Long> cases = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_AUTOTEST = "is_autotest";
  @SerializedName(SERIALIZED_NAME_IS_AUTOTEST)
  @javax.annotation.Nullable
  private Boolean isAutotest;

  public static final String SERIALIZED_NAME_ENVIRONMENT_ID = "environment_id";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_ID)
  @javax.annotation.Nullable
  private Long environmentId;

  public static final String SERIALIZED_NAME_ENVIRONMENT_SLUG = "environment_slug";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_SLUG)
  @javax.annotation.Nullable
  private String environmentSlug;

  public static final String SERIALIZED_NAME_MILESTONE_ID = "milestone_id";
  @SerializedName(SERIALIZED_NAME_MILESTONE_ID)
  @javax.annotation.Nullable
  private Long milestoneId;

  public static final String SERIALIZED_NAME_PLAN_ID = "plan_id";
  @SerializedName(SERIALIZED_NAME_PLAN_ID)
  @javax.annotation.Nullable
  private Long planId;

  public static final String SERIALIZED_NAME_AUTHOR_ID = "author_id";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ID)
  @javax.annotation.Nullable
  private Long authorId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIGURATIONS = "configurations";
  @SerializedName(SERIALIZED_NAME_CONFIGURATIONS)
  @javax.annotation.Nullable
  private List<Long> configurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_FIELD = "custom_field";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELD)
  @javax.annotation.Nullable
  private Map<String, String> customField = new HashMap<>();

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  @javax.annotation.Nullable
  private String startTime;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  @javax.annotation.Nullable
  private String endTime;

  public static final String SERIALIZED_NAME_IS_CLOUD = "is_cloud";
  @SerializedName(SERIALIZED_NAME_IS_CLOUD)
  @javax.annotation.Nullable
  private Boolean isCloud;

  public static final String SERIALIZED_NAME_CLOUD_RUN_CONFIG = "cloud_run_config";
  @SerializedName(SERIALIZED_NAME_CLOUD_RUN_CONFIG)
  @javax.annotation.Nullable
  private RunCreateCloudRunConfig cloudRunConfig;

  public RunCreate() {
  }

  public RunCreate title(@javax.annotation.Nonnull String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(@javax.annotation.Nonnull String title) {
    this.title = title;
  }


  public RunCreate description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public RunCreate includeAllCases(@javax.annotation.Nullable Boolean includeAllCases) {
    this.includeAllCases = includeAllCases;
    return this;
  }

  /**
   * Get includeAllCases
   * @return includeAllCases
   */
  @javax.annotation.Nullable
  public Boolean getIncludeAllCases() {
    return includeAllCases;
  }

  public void setIncludeAllCases(@javax.annotation.Nullable Boolean includeAllCases) {
    this.includeAllCases = includeAllCases;
  }


  public RunCreate cases(@javax.annotation.Nullable List<Long> cases) {
    this.cases = cases;
    return this;
  }

  public RunCreate addCasesItem(Long casesItem) {
    if (this.cases == null) {
      this.cases = new ArrayList<>();
    }
    this.cases.add(casesItem);
    return this;
  }

  /**
   * Get cases
   * @return cases
   */
  @javax.annotation.Nullable
  public List<Long> getCases() {
    return cases;
  }

  public void setCases(@javax.annotation.Nullable List<Long> cases) {
    this.cases = cases;
  }


  public RunCreate isAutotest(@javax.annotation.Nullable Boolean isAutotest) {
    this.isAutotest = isAutotest;
    return this;
  }

  /**
   * Get isAutotest
   * @return isAutotest
   */
  @javax.annotation.Nullable
  public Boolean getIsAutotest() {
    return isAutotest;
  }

  public void setIsAutotest(@javax.annotation.Nullable Boolean isAutotest) {
    this.isAutotest = isAutotest;
  }


  public RunCreate environmentId(@javax.annotation.Nullable Long environmentId) {
    this.environmentId = environmentId;
    return this;
  }

  /**
   * Get environmentId
   * minimum: 1
   * @return environmentId
   */
  @javax.annotation.Nullable
  public Long getEnvironmentId() {
    return environmentId;
  }

  public void setEnvironmentId(@javax.annotation.Nullable Long environmentId) {
    this.environmentId = environmentId;
  }


  public RunCreate environmentSlug(@javax.annotation.Nullable String environmentSlug) {
    this.environmentSlug = environmentSlug;
    return this;
  }

  /**
   * Get environmentSlug
   * @return environmentSlug
   */
  @javax.annotation.Nullable
  public String getEnvironmentSlug() {
    return environmentSlug;
  }

  public void setEnvironmentSlug(@javax.annotation.Nullable String environmentSlug) {
    this.environmentSlug = environmentSlug;
  }


  public RunCreate milestoneId(@javax.annotation.Nullable Long milestoneId) {
    this.milestoneId = milestoneId;
    return this;
  }

  /**
   * Get milestoneId
   * minimum: 1
   * @return milestoneId
   */
  @javax.annotation.Nullable
  public Long getMilestoneId() {
    return milestoneId;
  }

  public void setMilestoneId(@javax.annotation.Nullable Long milestoneId) {
    this.milestoneId = milestoneId;
  }


  public RunCreate planId(@javax.annotation.Nullable Long planId) {
    this.planId = planId;
    return this;
  }

  /**
   * Get planId
   * minimum: 1
   * @return planId
   */
  @javax.annotation.Nullable
  public Long getPlanId() {
    return planId;
  }

  public void setPlanId(@javax.annotation.Nullable Long planId) {
    this.planId = planId;
  }


  public RunCreate authorId(@javax.annotation.Nullable Long authorId) {
    this.authorId = authorId;
    return this;
  }

  /**
   * Get authorId
   * minimum: 1
   * @return authorId
   */
  @javax.annotation.Nullable
  public Long getAuthorId() {
    return authorId;
  }

  public void setAuthorId(@javax.annotation.Nullable Long authorId) {
    this.authorId = authorId;
  }


  public RunCreate tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public RunCreate addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public RunCreate configurations(@javax.annotation.Nullable List<Long> configurations) {
    this.configurations = configurations;
    return this;
  }

  public RunCreate addConfigurationsItem(Long configurationsItem) {
    if (this.configurations == null) {
      this.configurations = new ArrayList<>();
    }
    this.configurations.add(configurationsItem);
    return this;
  }

  /**
   * Get configurations
   * @return configurations
   */
  @javax.annotation.Nullable
  public List<Long> getConfigurations() {
    return configurations;
  }

  public void setConfigurations(@javax.annotation.Nullable List<Long> configurations) {
    this.configurations = configurations;
  }


  public RunCreate customField(@javax.annotation.Nullable Map<String, String> customField) {
    this.customField = customField;
    return this;
  }

  public RunCreate putCustomFieldItem(String key, String customFieldItem) {
    if (this.customField == null) {
      this.customField = new HashMap<>();
    }
    this.customField.put(key, customFieldItem);
    return this;
  }

  /**
   * A map of custom fields values (id &#x3D;&gt; value)
   * @return customField
   */
  @javax.annotation.Nullable
  public Map<String, String> getCustomField() {
    return customField;
  }

  public void setCustomField(@javax.annotation.Nullable Map<String, String> customField) {
    this.customField = customField;
  }


  public RunCreate startTime(@javax.annotation.Nullable String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(@javax.annotation.Nullable String startTime) {
    this.startTime = startTime;
  }


  public RunCreate endTime(@javax.annotation.Nullable String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(@javax.annotation.Nullable String endTime) {
    this.endTime = endTime;
  }


  public RunCreate isCloud(@javax.annotation.Nullable Boolean isCloud) {
    this.isCloud = isCloud;
    return this;
  }

  /**
   * Indicates if the run is created for the Test Cases produced by AIDEN
   * @return isCloud
   */
  @javax.annotation.Nullable
  public Boolean getIsCloud() {
    return isCloud;
  }

  public void setIsCloud(@javax.annotation.Nullable Boolean isCloud) {
    this.isCloud = isCloud;
  }


  public RunCreate cloudRunConfig(@javax.annotation.Nullable RunCreateCloudRunConfig cloudRunConfig) {
    this.cloudRunConfig = cloudRunConfig;
    return this;
  }

  /**
   * Get cloudRunConfig
   * @return cloudRunConfig
   */
  @javax.annotation.Nullable
  public RunCreateCloudRunConfig getCloudRunConfig() {
    return cloudRunConfig;
  }

  public void setCloudRunConfig(@javax.annotation.Nullable RunCreateCloudRunConfig cloudRunConfig) {
    this.cloudRunConfig = cloudRunConfig;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RunCreate instance itself
   */
  public RunCreate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunCreate runCreate = (RunCreate) o;
    return Objects.equals(this.title, runCreate.title) &&
        Objects.equals(this.description, runCreate.description) &&
        Objects.equals(this.includeAllCases, runCreate.includeAllCases) &&
        Objects.equals(this.cases, runCreate.cases) &&
        Objects.equals(this.isAutotest, runCreate.isAutotest) &&
        Objects.equals(this.environmentId, runCreate.environmentId) &&
        Objects.equals(this.environmentSlug, runCreate.environmentSlug) &&
        Objects.equals(this.milestoneId, runCreate.milestoneId) &&
        Objects.equals(this.planId, runCreate.planId) &&
        Objects.equals(this.authorId, runCreate.authorId) &&
        Objects.equals(this.tags, runCreate.tags) &&
        Objects.equals(this.configurations, runCreate.configurations) &&
        Objects.equals(this.customField, runCreate.customField) &&
        Objects.equals(this.startTime, runCreate.startTime) &&
        Objects.equals(this.endTime, runCreate.endTime) &&
        Objects.equals(this.isCloud, runCreate.isCloud) &&
        Objects.equals(this.cloudRunConfig, runCreate.cloudRunConfig)&&
        Objects.equals(this.additionalProperties, runCreate.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, includeAllCases, cases, isAutotest, environmentId, environmentSlug, milestoneId, planId, authorId, tags, configurations, customField, startTime, endTime, isCloud, cloudRunConfig, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunCreate {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    includeAllCases: ").append(toIndentedString(includeAllCases)).append("\n");
    sb.append("    cases: ").append(toIndentedString(cases)).append("\n");
    sb.append("    isAutotest: ").append(toIndentedString(isAutotest)).append("\n");
    sb.append("    environmentId: ").append(toIndentedString(environmentId)).append("\n");
    sb.append("    environmentSlug: ").append(toIndentedString(environmentSlug)).append("\n");
    sb.append("    milestoneId: ").append(toIndentedString(milestoneId)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("    authorId: ").append(toIndentedString(authorId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    configurations: ").append(toIndentedString(configurations)).append("\n");
    sb.append("    customField: ").append(toIndentedString(customField)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    isCloud: ").append(toIndentedString(isCloud)).append("\n");
    sb.append("    cloudRunConfig: ").append(toIndentedString(cloudRunConfig)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("title", "description", "include_all_cases", "cases", "is_autotest", "environment_id", "environment_slug", "milestone_id", "plan_id", "author_id", "tags", "configurations", "custom_field", "start_time", "end_time", "is_cloud", "cloud_run_config"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("title"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunCreate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunCreate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunCreate is not found in the empty JSON string", RunCreate.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RunCreate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cases") != null && !jsonObj.get("cases").isJsonNull() && !jsonObj.get("cases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cases` to be an array in the JSON string but got `%s`", jsonObj.get("cases").toString()));
      }
      if ((jsonObj.get("environment_slug") != null && !jsonObj.get("environment_slug").isJsonNull()) && !jsonObj.get("environment_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment_slug").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("configurations") != null && !jsonObj.get("configurations").isJsonNull() && !jsonObj.get("configurations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurations` to be an array in the JSON string but got `%s`", jsonObj.get("configurations").toString()));
      }
      if ((jsonObj.get("start_time") != null && !jsonObj.get("start_time").isJsonNull()) && !jsonObj.get("start_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_time").toString()));
      }
      if ((jsonObj.get("end_time") != null && !jsonObj.get("end_time").isJsonNull()) && !jsonObj.get("end_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_time").toString()));
      }
      // validate the optional field `cloud_run_config`
      if (jsonObj.get("cloud_run_config") != null && !jsonObj.get("cloud_run_config").isJsonNull()) {
        RunCreateCloudRunConfig.validateJsonElement(jsonObj.get("cloud_run_config"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunCreate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunCreate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunCreate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunCreate.class));

       return (TypeAdapter<T>) new TypeAdapter<RunCreate>() {
           @Override
           public void write(JsonWriter out, RunCreate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RunCreate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             RunCreate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunCreate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunCreate
   * @throws IOException if the JSON string is invalid with respect to RunCreate
   */
  public static RunCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunCreate.class);
  }

  /**
   * Convert an instance of RunCreate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

