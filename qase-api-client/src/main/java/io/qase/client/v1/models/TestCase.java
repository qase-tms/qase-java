/*
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.qase.client.v1.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.qase.client.v1.models.Attachment;
import io.qase.client.v1.models.CustomFieldValue;
import io.qase.client.v1.models.ExternalIssue;
import io.qase.client.v1.models.TagValue;
import io.qase.client.v1.models.TestCaseParameter;
import io.qase.client.v1.models.TestCaseParams;
import io.qase.client.v1.models.TestStep;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.qase.client.v1.JSON;

/**
 * TestCase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.15.0")
public class TestCase {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Long id;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  @javax.annotation.Nullable
  private Integer position;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  @javax.annotation.Nullable
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_PRECONDITIONS = "preconditions";
  @SerializedName(SERIALIZED_NAME_PRECONDITIONS)
  @javax.annotation.Nullable
  private String preconditions;

  public static final String SERIALIZED_NAME_POSTCONDITIONS = "postconditions";
  @SerializedName(SERIALIZED_NAME_POSTCONDITIONS)
  @javax.annotation.Nullable
  private String postconditions;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  @javax.annotation.Nullable
  private Integer severity;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  @javax.annotation.Nullable
  private Integer priority;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private Integer type;

  public static final String SERIALIZED_NAME_LAYER = "layer";
  @SerializedName(SERIALIZED_NAME_LAYER)
  @javax.annotation.Nullable
  private Integer layer;

  public static final String SERIALIZED_NAME_IS_FLAKY = "is_flaky";
  @SerializedName(SERIALIZED_NAME_IS_FLAKY)
  @javax.annotation.Nullable
  private Integer isFlaky;

  public static final String SERIALIZED_NAME_BEHAVIOR = "behavior";
  @SerializedName(SERIALIZED_NAME_BEHAVIOR)
  @javax.annotation.Nullable
  private Integer behavior;

  public static final String SERIALIZED_NAME_AUTOMATION = "automation";
  @SerializedName(SERIALIZED_NAME_AUTOMATION)
  @javax.annotation.Nullable
  private Integer automation;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private Integer status;

  public static final String SERIALIZED_NAME_MILESTONE_ID = "milestone_id";
  @SerializedName(SERIALIZED_NAME_MILESTONE_ID)
  @javax.annotation.Nullable
  private Long milestoneId;

  public static final String SERIALIZED_NAME_SUITE_ID = "suite_id";
  @SerializedName(SERIALIZED_NAME_SUITE_ID)
  @javax.annotation.Nullable
  private Long suiteId;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  @javax.annotation.Nullable
  private List<CustomFieldValue> customFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  @javax.annotation.Nullable
  private List<Attachment> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_STEPS_TYPE = "steps_type";
  @SerializedName(SERIALIZED_NAME_STEPS_TYPE)
  @javax.annotation.Nullable
  private String stepsType;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  @javax.annotation.Nullable
  private List<TestStep> steps = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PARAMS)
  @javax.annotation.Nullable
  private TestCaseParams params;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  @javax.annotation.Nullable
  private List<TestCaseParameter> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<TagValue> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEMBER_ID = "member_id";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_MEMBER_ID)
  @javax.annotation.Nullable
  private Long memberId;

  public static final String SERIALIZED_NAME_AUTHOR_ID = "author_id";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ID)
  @javax.annotation.Nullable
  private Long authorId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DELETED)
  @javax.annotation.Nullable
  private String deleted;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CREATED)
  @javax.annotation.Nullable
  private String created;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_UPDATED)
  @javax.annotation.Nullable
  private String updated;

  public static final String SERIALIZED_NAME_EXTERNAL_ISSUES = "external_issues";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ISSUES)
  @javax.annotation.Nullable
  private List<ExternalIssue> externalIssues = new ArrayList<>();

  public TestCase() {
  }

  public TestCase id(@javax.annotation.Nullable Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Long id) {
    this.id = id;
  }


  public TestCase position(@javax.annotation.Nullable Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public Integer getPosition() {
    return position;
  }

  public void setPosition(@javax.annotation.Nullable Integer position) {
    this.position = position;
  }


  public TestCase title(@javax.annotation.Nullable String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(@javax.annotation.Nullable String title) {
    this.title = title;
  }


  public TestCase description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public TestCase preconditions(@javax.annotation.Nullable String preconditions) {
    this.preconditions = preconditions;
    return this;
  }

  /**
   * Get preconditions
   * @return preconditions
   */
  @javax.annotation.Nullable
  public String getPreconditions() {
    return preconditions;
  }

  public void setPreconditions(@javax.annotation.Nullable String preconditions) {
    this.preconditions = preconditions;
  }


  public TestCase postconditions(@javax.annotation.Nullable String postconditions) {
    this.postconditions = postconditions;
    return this;
  }

  /**
   * Get postconditions
   * @return postconditions
   */
  @javax.annotation.Nullable
  public String getPostconditions() {
    return postconditions;
  }

  public void setPostconditions(@javax.annotation.Nullable String postconditions) {
    this.postconditions = postconditions;
  }


  public TestCase severity(@javax.annotation.Nullable Integer severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public Integer getSeverity() {
    return severity;
  }

  public void setSeverity(@javax.annotation.Nullable Integer severity) {
    this.severity = severity;
  }


  public TestCase priority(@javax.annotation.Nullable Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(@javax.annotation.Nullable Integer priority) {
    this.priority = priority;
  }


  public TestCase type(@javax.annotation.Nullable Integer type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public Integer getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable Integer type) {
    this.type = type;
  }


  public TestCase layer(@javax.annotation.Nullable Integer layer) {
    this.layer = layer;
    return this;
  }

  /**
   * Get layer
   * @return layer
   */
  @javax.annotation.Nullable
  public Integer getLayer() {
    return layer;
  }

  public void setLayer(@javax.annotation.Nullable Integer layer) {
    this.layer = layer;
  }


  public TestCase isFlaky(@javax.annotation.Nullable Integer isFlaky) {
    this.isFlaky = isFlaky;
    return this;
  }

  /**
   * Get isFlaky
   * @return isFlaky
   */
  @javax.annotation.Nullable
  public Integer getIsFlaky() {
    return isFlaky;
  }

  public void setIsFlaky(@javax.annotation.Nullable Integer isFlaky) {
    this.isFlaky = isFlaky;
  }


  public TestCase behavior(@javax.annotation.Nullable Integer behavior) {
    this.behavior = behavior;
    return this;
  }

  /**
   * Get behavior
   * @return behavior
   */
  @javax.annotation.Nullable
  public Integer getBehavior() {
    return behavior;
  }

  public void setBehavior(@javax.annotation.Nullable Integer behavior) {
    this.behavior = behavior;
  }


  public TestCase automation(@javax.annotation.Nullable Integer automation) {
    this.automation = automation;
    return this;
  }

  /**
   * Get automation
   * @return automation
   */
  @javax.annotation.Nullable
  public Integer getAutomation() {
    return automation;
  }

  public void setAutomation(@javax.annotation.Nullable Integer automation) {
    this.automation = automation;
  }


  public TestCase status(@javax.annotation.Nullable Integer status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable Integer status) {
    this.status = status;
  }


  public TestCase milestoneId(@javax.annotation.Nullable Long milestoneId) {
    this.milestoneId = milestoneId;
    return this;
  }

  /**
   * Get milestoneId
   * @return milestoneId
   */
  @javax.annotation.Nullable
  public Long getMilestoneId() {
    return milestoneId;
  }

  public void setMilestoneId(@javax.annotation.Nullable Long milestoneId) {
    this.milestoneId = milestoneId;
  }


  public TestCase suiteId(@javax.annotation.Nullable Long suiteId) {
    this.suiteId = suiteId;
    return this;
  }

  /**
   * Get suiteId
   * @return suiteId
   */
  @javax.annotation.Nullable
  public Long getSuiteId() {
    return suiteId;
  }

  public void setSuiteId(@javax.annotation.Nullable Long suiteId) {
    this.suiteId = suiteId;
  }


  public TestCase customFields(@javax.annotation.Nullable List<CustomFieldValue> customFields) {
    this.customFields = customFields;
    return this;
  }

  public TestCase addCustomFieldsItem(CustomFieldValue customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public List<CustomFieldValue> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(@javax.annotation.Nullable List<CustomFieldValue> customFields) {
    this.customFields = customFields;
  }


  public TestCase attachments(@javax.annotation.Nullable List<Attachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public TestCase addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<Attachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(@javax.annotation.Nullable List<Attachment> attachments) {
    this.attachments = attachments;
  }


  public TestCase stepsType(@javax.annotation.Nullable String stepsType) {
    this.stepsType = stepsType;
    return this;
  }

  /**
   * Get stepsType
   * @return stepsType
   */
  @javax.annotation.Nullable
  public String getStepsType() {
    return stepsType;
  }

  public void setStepsType(@javax.annotation.Nullable String stepsType) {
    this.stepsType = stepsType;
  }


  public TestCase steps(@javax.annotation.Nullable List<TestStep> steps) {
    this.steps = steps;
    return this;
  }

  public TestCase addStepsItem(TestStep stepsItem) {
    if (this.steps == null) {
      this.steps = new ArrayList<>();
    }
    this.steps.add(stepsItem);
    return this;
  }

  /**
   * Get steps
   * @return steps
   */
  @javax.annotation.Nullable
  public List<TestStep> getSteps() {
    return steps;
  }

  public void setSteps(@javax.annotation.Nullable List<TestStep> steps) {
    this.steps = steps;
  }


  @Deprecated
  public TestCase params(@javax.annotation.Nullable TestCaseParams params) {
    this.params = params;
    return this;
  }

  /**
   * Get params
   * @return params
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public TestCaseParams getParams() {
    return params;
  }

  @Deprecated
  public void setParams(@javax.annotation.Nullable TestCaseParams params) {
    this.params = params;
  }


  public TestCase parameters(@javax.annotation.Nullable List<TestCaseParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public TestCase addParametersItem(TestCaseParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<TestCaseParameter> getParameters() {
    return parameters;
  }

  public void setParameters(@javax.annotation.Nullable List<TestCaseParameter> parameters) {
    this.parameters = parameters;
  }


  public TestCase tags(@javax.annotation.Nullable List<TagValue> tags) {
    this.tags = tags;
    return this;
  }

  public TestCase addTagsItem(TagValue tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<TagValue> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<TagValue> tags) {
    this.tags = tags;
  }


  @Deprecated
  public TestCase memberId(@javax.annotation.Nullable Long memberId) {
    this.memberId = memberId;
    return this;
  }

  /**
   * Deprecated, use &#x60;author_id&#x60; instead.
   * @return memberId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Long getMemberId() {
    return memberId;
  }

  @Deprecated
  public void setMemberId(@javax.annotation.Nullable Long memberId) {
    this.memberId = memberId;
  }


  public TestCase authorId(@javax.annotation.Nullable Long authorId) {
    this.authorId = authorId;
    return this;
  }

  /**
   * Get authorId
   * @return authorId
   */
  @javax.annotation.Nullable
  public Long getAuthorId() {
    return authorId;
  }

  public void setAuthorId(@javax.annotation.Nullable Long authorId) {
    this.authorId = authorId;
  }


  public TestCase createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TestCase updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Deprecated
  public TestCase deleted(@javax.annotation.Nullable String deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getDeleted() {
    return deleted;
  }

  @Deprecated
  public void setDeleted(@javax.annotation.Nullable String deleted) {
    this.deleted = deleted;
  }


  @Deprecated
  public TestCase created(@javax.annotation.Nullable String created) {
    this.created = created;
    return this;
  }

  /**
   * Deprecated, use the &#x60;created_at&#x60; property instead.
   * @return created
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  @Deprecated
  public void setCreated(@javax.annotation.Nullable String created) {
    this.created = created;
  }


  @Deprecated
  public TestCase updated(@javax.annotation.Nullable String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Deprecated, use the &#x60;updated_at&#x60; property instead.
   * @return updated
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  @Deprecated
  public void setUpdated(@javax.annotation.Nullable String updated) {
    this.updated = updated;
  }


  public TestCase externalIssues(@javax.annotation.Nullable List<ExternalIssue> externalIssues) {
    this.externalIssues = externalIssues;
    return this;
  }

  public TestCase addExternalIssuesItem(ExternalIssue externalIssuesItem) {
    if (this.externalIssues == null) {
      this.externalIssues = new ArrayList<>();
    }
    this.externalIssues.add(externalIssuesItem);
    return this;
  }

  /**
   * Get externalIssues
   * @return externalIssues
   */
  @javax.annotation.Nullable
  public List<ExternalIssue> getExternalIssues() {
    return externalIssues;
  }

  public void setExternalIssues(@javax.annotation.Nullable List<ExternalIssue> externalIssues) {
    this.externalIssues = externalIssues;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TestCase instance itself
   */
  public TestCase putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestCase testCase = (TestCase) o;
    return Objects.equals(this.id, testCase.id) &&
        Objects.equals(this.position, testCase.position) &&
        Objects.equals(this.title, testCase.title) &&
        Objects.equals(this.description, testCase.description) &&
        Objects.equals(this.preconditions, testCase.preconditions) &&
        Objects.equals(this.postconditions, testCase.postconditions) &&
        Objects.equals(this.severity, testCase.severity) &&
        Objects.equals(this.priority, testCase.priority) &&
        Objects.equals(this.type, testCase.type) &&
        Objects.equals(this.layer, testCase.layer) &&
        Objects.equals(this.isFlaky, testCase.isFlaky) &&
        Objects.equals(this.behavior, testCase.behavior) &&
        Objects.equals(this.automation, testCase.automation) &&
        Objects.equals(this.status, testCase.status) &&
        Objects.equals(this.milestoneId, testCase.milestoneId) &&
        Objects.equals(this.suiteId, testCase.suiteId) &&
        Objects.equals(this.customFields, testCase.customFields) &&
        Objects.equals(this.attachments, testCase.attachments) &&
        Objects.equals(this.stepsType, testCase.stepsType) &&
        Objects.equals(this.steps, testCase.steps) &&
        Objects.equals(this.params, testCase.params) &&
        Objects.equals(this.parameters, testCase.parameters) &&
        Objects.equals(this.tags, testCase.tags) &&
        Objects.equals(this.memberId, testCase.memberId) &&
        Objects.equals(this.authorId, testCase.authorId) &&
        Objects.equals(this.createdAt, testCase.createdAt) &&
        Objects.equals(this.updatedAt, testCase.updatedAt) &&
        Objects.equals(this.deleted, testCase.deleted) &&
        Objects.equals(this.created, testCase.created) &&
        Objects.equals(this.updated, testCase.updated) &&
        Objects.equals(this.externalIssues, testCase.externalIssues)&&
        Objects.equals(this.additionalProperties, testCase.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, position, title, description, preconditions, postconditions, severity, priority, type, layer, isFlaky, behavior, automation, status, milestoneId, suiteId, customFields, attachments, stepsType, steps, params, parameters, tags, memberId, authorId, createdAt, updatedAt, deleted, created, updated, externalIssues, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestCase {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    preconditions: ").append(toIndentedString(preconditions)).append("\n");
    sb.append("    postconditions: ").append(toIndentedString(postconditions)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    layer: ").append(toIndentedString(layer)).append("\n");
    sb.append("    isFlaky: ").append(toIndentedString(isFlaky)).append("\n");
    sb.append("    behavior: ").append(toIndentedString(behavior)).append("\n");
    sb.append("    automation: ").append(toIndentedString(automation)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    milestoneId: ").append(toIndentedString(milestoneId)).append("\n");
    sb.append("    suiteId: ").append(toIndentedString(suiteId)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    stepsType: ").append(toIndentedString(stepsType)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    memberId: ").append(toIndentedString(memberId)).append("\n");
    sb.append("    authorId: ").append(toIndentedString(authorId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    externalIssues: ").append(toIndentedString(externalIssues)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "position", "title", "description", "preconditions", "postconditions", "severity", "priority", "type", "layer", "is_flaky", "behavior", "automation", "status", "milestone_id", "suite_id", "custom_fields", "attachments", "steps_type", "steps", "params", "parameters", "tags", "member_id", "author_id", "created_at", "updated_at", "deleted", "created", "updated", "external_issues"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestCase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestCase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestCase is not found in the empty JSON string", TestCase.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("preconditions") != null && !jsonObj.get("preconditions").isJsonNull()) && !jsonObj.get("preconditions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preconditions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preconditions").toString()));
      }
      if ((jsonObj.get("postconditions") != null && !jsonObj.get("postconditions").isJsonNull()) && !jsonObj.get("postconditions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postconditions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postconditions").toString()));
      }
      if (jsonObj.get("custom_fields") != null && !jsonObj.get("custom_fields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("custom_fields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_fields` to be an array in the JSON string but got `%s`", jsonObj.get("custom_fields").toString()));
          }

          // validate the optional field `custom_fields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            CustomFieldValue.validateJsonElement(jsonArraycustomFields.get(i));
          };
        }
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            Attachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("steps_type") != null && !jsonObj.get("steps_type").isJsonNull()) && !jsonObj.get("steps_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `steps_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("steps_type").toString()));
      }
      if (jsonObj.get("steps") != null && !jsonObj.get("steps").isJsonNull()) {
        JsonArray jsonArraysteps = jsonObj.getAsJsonArray("steps");
        if (jsonArraysteps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("steps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `steps` to be an array in the JSON string but got `%s`", jsonObj.get("steps").toString()));
          }

          // validate the optional field `steps` (array)
          for (int i = 0; i < jsonArraysteps.size(); i++) {
            TestStep.validateJsonElement(jsonArraysteps.get(i));
          };
        }
      }
      // validate the optional field `params`
      if (jsonObj.get("params") != null && !jsonObj.get("params").isJsonNull()) {
        TestCaseParams.validateJsonElement(jsonObj.get("params"));
      }
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
          }

          // validate the optional field `parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            TestCaseParameter.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            TagValue.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("deleted") != null && !jsonObj.get("deleted").isJsonNull()) && !jsonObj.get("deleted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleted").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
      if (jsonObj.get("external_issues") != null && !jsonObj.get("external_issues").isJsonNull()) {
        JsonArray jsonArrayexternalIssues = jsonObj.getAsJsonArray("external_issues");
        if (jsonArrayexternalIssues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("external_issues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `external_issues` to be an array in the JSON string but got `%s`", jsonObj.get("external_issues").toString()));
          }

          // validate the optional field `external_issues` (array)
          for (int i = 0; i < jsonArrayexternalIssues.size(); i++) {
            ExternalIssue.validateJsonElement(jsonArrayexternalIssues.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestCase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestCase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestCase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestCase.class));

       return (TypeAdapter<T>) new TypeAdapter<TestCase>() {
           @Override
           public void write(JsonWriter out, TestCase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TestCase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             TestCase instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestCase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestCase
   * @throws IOException if the JSON string is invalid with respect to TestCase
   */
  public static TestCase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestCase.class);
  }

  /**
   * Convert an instance of TestCase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

