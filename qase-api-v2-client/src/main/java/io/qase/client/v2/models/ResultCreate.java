/*
 * Qase.io TestOps API v2
 * Qase TestOps API v2 Specification.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.qase.client.v2.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.qase.client.v2.models.ResultCreateFields;
import io.qase.client.v2.models.ResultExecution;
import io.qase.client.v2.models.ResultRelations;
import io.qase.client.v2.models.ResultStep;
import io.qase.client.v2.models.ResultStepsType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.qase.client.v2.JSON;

/**
 * ResultCreate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class ResultCreate {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_TESTOPS_ID = "testops_id";
  @SerializedName(SERIALIZED_NAME_TESTOPS_ID)
  private Long testopsId;

  public static final String SERIALIZED_NAME_TESTOPS_IDS = "testops_ids";
  @SerializedName(SERIALIZED_NAME_TESTOPS_IDS)
  private List<Long> testopsIds;

  public static final String SERIALIZED_NAME_EXECUTION = "execution";
  @SerializedName(SERIALIZED_NAME_EXECUTION)
  private ResultExecution execution;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private ResultCreateFields fields;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<String> attachments;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private List<ResultStep> steps;

  public static final String SERIALIZED_NAME_STEPS_TYPE = "steps_type";
  @SerializedName(SERIALIZED_NAME_STEPS_TYPE)
  private ResultStepsType stepsType;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private Map<String, String> params = new HashMap<>();

  public static final String SERIALIZED_NAME_PARAM_GROUPS = "param_groups";
  @SerializedName(SERIALIZED_NAME_PARAM_GROUPS)
  private List<List<String>> paramGroups;

  public static final String SERIALIZED_NAME_RELATIONS = "relations";
  @SerializedName(SERIALIZED_NAME_RELATIONS)
  private ResultRelations relations;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_DEFECT = "defect";
  @SerializedName(SERIALIZED_NAME_DEFECT)
  private Boolean defect;

  public ResultCreate() {
  }

  public ResultCreate id(String id) {
    this.id = id;
    return this;
  }

   /**
   * If passed, used as an idempotency key
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ResultCreate title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ResultCreate signature(String signature) {
    this.signature = signature;
    return this;
  }

   /**
   * Get signature
   * @return signature
  **/
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public ResultCreate testopsId(Long testopsId) {
    this.testopsId = testopsId;
    return this;
  }

   /**
   * ID of the test case. Cannot be specified together with testopd_ids.
   * @return testopsId
  **/
  @javax.annotation.Nullable
  public Long getTestopsId() {
    return testopsId;
  }

  public void setTestopsId(Long testopsId) {
    this.testopsId = testopsId;
  }


  public ResultCreate testopsIds(List<Long> testopsIds) {
    this.testopsIds = testopsIds;
    return this;
  }

  public ResultCreate addTestopsIdsItem(Long testopsIdsItem) {
    if (this.testopsIds == null) {
      this.testopsIds = new ArrayList<>();
    }
    this.testopsIds.add(testopsIdsItem);
    return this;
  }

   /**
   * IDs of the test cases. Cannot be specified together with testopd_id.
   * @return testopsIds
  **/
  @javax.annotation.Nullable
  public List<Long> getTestopsIds() {
    return testopsIds;
  }

  public void setTestopsIds(List<Long> testopsIds) {
    this.testopsIds = testopsIds;
  }


  public ResultCreate execution(ResultExecution execution) {
    this.execution = execution;
    return this;
  }

   /**
   * Get execution
   * @return execution
  **/
  @javax.annotation.Nonnull
  public ResultExecution getExecution() {
    return execution;
  }

  public void setExecution(ResultExecution execution) {
    this.execution = execution;
  }


  public ResultCreate fields(ResultCreateFields fields) {
    this.fields = fields;
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @javax.annotation.Nullable
  public ResultCreateFields getFields() {
    return fields;
  }

  public void setFields(ResultCreateFields fields) {
    this.fields = fields;
  }


  public ResultCreate attachments(List<String> attachments) {
    this.attachments = attachments;
    return this;
  }

  public ResultCreate addAttachmentsItem(String attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @javax.annotation.Nullable
  public List<String> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<String> attachments) {
    this.attachments = attachments;
  }


  public ResultCreate steps(List<ResultStep> steps) {
    this.steps = steps;
    return this;
  }

  public ResultCreate addStepsItem(ResultStep stepsItem) {
    if (this.steps == null) {
      this.steps = new ArrayList<>();
    }
    this.steps.add(stepsItem);
    return this;
  }

   /**
   * Get steps
   * @return steps
  **/
  @javax.annotation.Nullable
  public List<ResultStep> getSteps() {
    return steps;
  }

  public void setSteps(List<ResultStep> steps) {
    this.steps = steps;
  }


  public ResultCreate stepsType(ResultStepsType stepsType) {
    this.stepsType = stepsType;
    return this;
  }

   /**
   * Get stepsType
   * @return stepsType
  **/
  @javax.annotation.Nullable
  public ResultStepsType getStepsType() {
    return stepsType;
  }

  public void setStepsType(ResultStepsType stepsType) {
    this.stepsType = stepsType;
  }


  public ResultCreate params(Map<String, String> params) {
    this.params = params;
    return this;
  }

  public ResultCreate putParamsItem(String key, String paramsItem) {
    if (this.params == null) {
      this.params = new HashMap<>();
    }
    this.params.put(key, paramsItem);
    return this;
  }

   /**
   * Get params
   * @return params
  **/
  @javax.annotation.Nullable
  public Map<String, String> getParams() {
    return params;
  }

  public void setParams(Map<String, String> params) {
    this.params = params;
  }


  public ResultCreate paramGroups(List<List<String>> paramGroups) {
    this.paramGroups = paramGroups;
    return this;
  }

  public ResultCreate addParamGroupsItem(List<String> paramGroupsItem) {
    if (this.paramGroups == null) {
      this.paramGroups = new ArrayList<>();
    }
    this.paramGroups.add(paramGroupsItem);
    return this;
  }

   /**
   * List parameter groups by name only. Add their values in the &#39;params&#39; field
   * @return paramGroups
  **/
  @javax.annotation.Nullable
  public List<List<String>> getParamGroups() {
    return paramGroups;
  }

  public void setParamGroups(List<List<String>> paramGroups) {
    this.paramGroups = paramGroups;
  }


  public ResultCreate relations(ResultRelations relations) {
    this.relations = relations;
    return this;
  }

   /**
   * Get relations
   * @return relations
  **/
  @javax.annotation.Nullable
  public ResultRelations getRelations() {
    return relations;
  }

  public void setRelations(ResultRelations relations) {
    this.relations = relations;
  }


  public ResultCreate message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ResultCreate defect(Boolean defect) {
    this.defect = defect;
    return this;
  }

   /**
   * If true and the result is failed, the defect associated with the result will be created
   * @return defect
  **/
  @javax.annotation.Nullable
  public Boolean getDefect() {
    return defect;
  }

  public void setDefect(Boolean defect) {
    this.defect = defect;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultCreate resultCreate = (ResultCreate) o;
    return Objects.equals(this.id, resultCreate.id) &&
        Objects.equals(this.title, resultCreate.title) &&
        Objects.equals(this.signature, resultCreate.signature) &&
        Objects.equals(this.testopsId, resultCreate.testopsId) &&
        Objects.equals(this.testopsIds, resultCreate.testopsIds) &&
        Objects.equals(this.execution, resultCreate.execution) &&
        Objects.equals(this.fields, resultCreate.fields) &&
        Objects.equals(this.attachments, resultCreate.attachments) &&
        Objects.equals(this.steps, resultCreate.steps) &&
        Objects.equals(this.stepsType, resultCreate.stepsType) &&
        Objects.equals(this.params, resultCreate.params) &&
        Objects.equals(this.paramGroups, resultCreate.paramGroups) &&
        Objects.equals(this.relations, resultCreate.relations) &&
        Objects.equals(this.message, resultCreate.message) &&
        Objects.equals(this.defect, resultCreate.defect);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, signature, testopsId, testopsIds, execution, fields, attachments, steps, stepsType, params, paramGroups, relations, message, defect);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultCreate {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    testopsId: ").append(toIndentedString(testopsId)).append("\n");
    sb.append("    testopsIds: ").append(toIndentedString(testopsIds)).append("\n");
    sb.append("    execution: ").append(toIndentedString(execution)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    stepsType: ").append(toIndentedString(stepsType)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    paramGroups: ").append(toIndentedString(paramGroups)).append("\n");
    sb.append("    relations: ").append(toIndentedString(relations)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    defect: ").append(toIndentedString(defect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("title");
    openapiFields.add("signature");
    openapiFields.add("testops_id");
    openapiFields.add("testops_ids");
    openapiFields.add("execution");
    openapiFields.add("fields");
    openapiFields.add("attachments");
    openapiFields.add("steps");
    openapiFields.add("steps_type");
    openapiFields.add("params");
    openapiFields.add("param_groups");
    openapiFields.add("relations");
    openapiFields.add("message");
    openapiFields.add("defect");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("execution");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ResultCreate
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResultCreate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResultCreate is not found in the empty JSON string", ResultCreate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResultCreate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResultCreate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResultCreate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("testops_ids") != null && !jsonObj.get("testops_ids").isJsonNull() && !jsonObj.get("testops_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `testops_ids` to be an array in the JSON string but got `%s`", jsonObj.get("testops_ids").toString()));
      }
      // validate the required field `execution`
      ResultExecution.validateJsonElement(jsonObj.get("execution"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull() && !jsonObj.get("attachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
      }
      if (jsonObj.get("steps") != null && !jsonObj.get("steps").isJsonNull()) {
        JsonArray jsonArraysteps = jsonObj.getAsJsonArray("steps");
        if (jsonArraysteps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("steps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `steps` to be an array in the JSON string but got `%s`", jsonObj.get("steps").toString()));
          }

          // validate the optional field `steps` (array)
          for (int i = 0; i < jsonArraysteps.size(); i++) {
            ResultStep.validateJsonElement(jsonArraysteps.get(i));
          };
        }
      }
      // validate the optional field `steps_type`
      if (jsonObj.get("steps_type") != null && !jsonObj.get("steps_type").isJsonNull()) {
        ResultStepsType.validateJsonElement(jsonObj.get("steps_type"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("param_groups") != null && !jsonObj.get("param_groups").isJsonNull() && !jsonObj.get("param_groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `param_groups` to be an array in the JSON string but got `%s`", jsonObj.get("param_groups").toString()));
      }
      // validate the optional field `relations`
      if (jsonObj.get("relations") != null && !jsonObj.get("relations").isJsonNull()) {
        ResultRelations.validateJsonElement(jsonObj.get("relations"));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResultCreate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResultCreate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResultCreate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResultCreate.class));

       return (TypeAdapter<T>) new TypeAdapter<ResultCreate>() {
           @Override
           public void write(JsonWriter out, ResultCreate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResultCreate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ResultCreate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ResultCreate
  * @throws IOException if the JSON string is invalid with respect to ResultCreate
  */
  public static ResultCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResultCreate.class);
  }

 /**
  * Convert an instance of ResultCreate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

